{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { BigNumber } from 'bignumber.js';\nimport toPattern from \"./toPattern\";\n\nfunction unMask(value) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n\n  if (type === 'currency') {\n    if (!value) return '0';\n    var unMaskedValue = value.replace(/\\D/g, '');\n    var number = parseInt(unMaskedValue.trimStart());\n    return number.toString();\n  }\n\n  return value.replace(/\\W/g, '');\n}\n\nfunction masker(value, pattern, options) {\n  var autoCapitalize = options.autoCapitalize;\n  var sentence = toPattern(value, _objectSpread({\n    pattern: pattern\n  }, options));\n\n  switch (autoCapitalize) {\n    case 'characters':\n      sentence.toUpperCase();\n      break;\n\n    case 'words':\n      sentence.replace(/(?:^|\\s)\\S/g, function (text) {\n        return text.toUpperCase();\n      });\n      break;\n\n    case 'sentences':\n      {\n        var lower = sentence.toLowerCase();\n        lower.charAt(0).toUpperCase() + lower.substring(1);\n        break;\n      }\n  }\n\n  return sentence;\n}\n\nfunction currencyMasker() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  var prefix = options.prefix,\n      decimalSeparator = options.decimalSeparator,\n      groupSeparator = options.groupSeparator,\n      precision = options.precision,\n      groupSize = options.groupSize,\n      secondaryGroupSize = options.secondaryGroupSize,\n      fractionGroupSeparator = options.fractionGroupSeparator,\n      fractionGroupSize = options.fractionGroupSize,\n      suffix = options.suffix;\n  var precisionDivider = parseInt(1 + '0'.repeat(precision || 0));\n  var number = parseInt(value) / precisionDivider;\n  var formatter = {\n    prefix: prefix,\n    decimalSeparator: decimalSeparator,\n    groupSeparator: groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize: secondaryGroupSize,\n    fractionGroupSeparator: fractionGroupSeparator,\n    fractionGroupSize: fractionGroupSize,\n    suffix: suffix\n  };\n  var bigNumber = new BigNumber(number);\n  BigNumber.config({\n    FORMAT: formatter\n  });\n  return bigNumber.toFormat(precision);\n}\n\nfunction dateMasker() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  var _options$dateFormat = options.dateFormat,\n      dateFormat = _options$dateFormat === void 0 ? 'yyyy/mm/dd' : _options$dateFormat;\n  var regex = /[a-zA-Z]/gi;\n  var pattern = dateFormat.replaceAll(regex, '9');\n  return masker(value, pattern, {});\n}\n\nfunction timeMasker() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  var _options$timeFormat = options.timeFormat,\n      timeFormat = _options$timeFormat === void 0 ? 'HH:mm:ss' : _options$timeFormat;\n  var pattern = timeFormat;\n  return masker(value, pattern, {});\n}\n\nfunction multimasker(value, patterns, options) {\n  return masker(value, patterns.reduce(function (memo, pattern) {\n    return value.length <= unMask(memo).length ? memo : pattern;\n  }, patterns[0]), options);\n}\n\nfunction mask(value) {\n  var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'custom';\n  var options = arguments.length > 3 ? arguments[3] : undefined;\n  var autoCapitalize = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (type === 'currency') {\n    return currencyMasker(String(value), options);\n  }\n\n  if (type === 'date') {\n    return dateMasker(String(value), options);\n  }\n\n  if (type === 'time') {\n    return timeMasker(String(value), options);\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {\n      autoCapitalize: autoCapitalize\n    });\n  }\n\n  return multimasker(String(value), pattern, {});\n}\n\nexport { mask, unMask };","map":{"version":3,"mappings":"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","names":["BigNumber","toPattern","unMask","value","type","unMaskedValue","replace","number","parseInt","trimStart","toString","masker","pattern","options","autoCapitalize","sentence","toUpperCase","text","lower","toLowerCase","charAt","substring","currencyMasker","prefix","decimalSeparator","groupSeparator","precision","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","suffix","precisionDivider","repeat","formatter","bigNumber","config","FORMAT","toFormat","dateMasker","dateFormat","regex","replaceAll","timeMasker","timeFormat","multimasker","patterns","reduce","memo","length","mask","String"],"sources":["mask.ts"],"sourcesContent":["/* eslint-disable no-confusing-arrow */\nimport { BigNumber } from 'bignumber.js'\nimport type { AutoCapitalizeOptions } from 'src/@types/AutoCapitalizeOptions'\nimport type { FormatType } from '../@types/FormatType'\nimport toPattern from './toPattern'\n\n/**\n * function unMask(\n * @param {string} value\n * @param {'custom' | 'currency'} type\n * @returns {string}\n */\nfunction unMask(value: string, type: 'custom' | 'currency' = 'custom') {\n  if (type === 'currency') {\n    if (!value) return '0'\n\n    const unMaskedValue = value.replace(/\\D/g, '')\n    const number = parseInt(unMaskedValue.trimStart())\n\n    return number.toString()\n  }\n\n  return value.replace(/\\W/g, '')\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {string} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction masker(value: string, pattern: string, options: any) {\n  const { autoCapitalize } = options\n\n  const sentence = toPattern(value, { pattern, ...options })\n\n  switch (autoCapitalize) {\n    case 'characters':\n      sentence.toUpperCase()\n      break\n    case 'words':\n      sentence.replace(/(?:^|\\s)\\S/g, (text) => text.toUpperCase())\n      break\n    case 'sentences':{\n      const lower = sentence.toLowerCase()\n      lower.charAt(0).toUpperCase() + lower.substring(1)\n      break\n    }\n  }\n\n  return sentence\n}\n\n/**\n * function masker(\n * @param {string} value\n * @param {any} options\n * @returns {string}\n */\nfunction currencyMasker(value = '0', options: any) {\n  const {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    precision,\n    groupSize,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  } = options\n\n  const precisionDivider = parseInt(1 + '0'.repeat(precision || 0))\n  const number = parseInt(value) / precisionDivider\n\n  const formatter = {\n    prefix,\n    decimalSeparator,\n    groupSeparator,\n    groupSize: groupSize || 3,\n    secondaryGroupSize,\n    fractionGroupSeparator,\n    fractionGroupSize,\n    suffix,\n  }\n\n  const bigNumber = new BigNumber(number)\n\n  BigNumber.config({ FORMAT: formatter })\n\n  return bigNumber.toFormat(precision)\n}\n\nfunction dateMasker(value = '', options: any) {\n  const { dateFormat = 'yyyy/mm/dd' } = options\n\n  const regex = /[a-zA-Z]/gi\n  const pattern = dateFormat.replaceAll(regex, '9')\n  return masker(value, pattern, {})\n}\n\nfunction timeMasker(value = '', options: any) {\n  const { timeFormat = 'HH:mm:ss' } = options\n\n  const pattern = timeFormat\n  return masker(value, pattern, {})\n}\n\n/**\n * function multimasker(\n * @param {string} value\n * @param {string[]} patterns\n * @param {any} options\n * @returns {string}\n */\nfunction multimasker(value: string, patterns: string[], options: any) {\n  return masker(\n    value,\n    patterns.reduce(\n      (memo: string, pattern: string) =>\n        value.length <= unMask(memo).length ? memo : pattern,\n      patterns[0]\n    ),\n    options\n  )\n}\n\nfunction mask(\n  value: string | number,\n  pattern: string | string[] = '',\n  type: FormatType = 'custom',\n  options?: any,\n  autoCapitalize?: AutoCapitalizeOptions\n): string {\n  if (type === 'currency') {\n    return currencyMasker(String(value), options)\n  }\n\n  if (type === 'date') {\n    return dateMasker(String(value), options)\n  }\n\n  if (type === 'time') {\n    return timeMasker(String(value), options)\n  }\n\n  if (typeof pattern === 'string') {\n    return masker(String(value), pattern || '', {\n      autoCapitalize: autoCapitalize,\n    })\n  }\n\n  return multimasker(String(value), pattern, {})\n}\n\nexport { mask, unMask }\n"]},"metadata":{},"sourceType":"module"}