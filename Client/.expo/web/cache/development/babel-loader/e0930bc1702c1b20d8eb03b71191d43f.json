{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { DatePickerAndroid } from \"react-native-web/dist/index\";\nimport { DatePickerIOS } from \"react-native-web/dist/index\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport dayjs from 'dayjs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default (function (_ref) {\n  var _ref$inputProps = _ref.inputProps,\n      inputProps = _ref$inputProps === void 0 ? {} : _ref$inputProps,\n      _ref$dateFormat = _ref.dateFormat,\n      dateFormat = _ref$dateFormat === void 0 ? 'YYYY-MM-DD' : _ref$dateFormat,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,\n      _ref$defaultDate = _ref.defaultDate,\n      defaultDate = _ref$defaultDate === void 0 ? new Date() : _ref$defaultDate,\n      _ref$minimumDate = _ref.minimumDate,\n      minimumDate = _ref$minimumDate === void 0 ? null : _ref$minimumDate,\n      _ref$maximumDate = _ref.maximumDate,\n      maximumDate = _ref$maximumDate === void 0 ? null : _ref$maximumDate,\n      handleChange = _ref.handleChange,\n      onRef = _ref.onRef;\n\n  var _React$useState = React.useState(defaultDate),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      date = _React$useState2[0],\n      setDate = _React$useState2[1];\n\n  var _React$useState3 = React.useState(defaultValue),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setValue = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      visible = _React$useState6[0],\n      setVisible = _React$useState6[1];\n\n  var ANDROID = Platform.OS === 'android';\n  React.useEffect(function () {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  var open = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      Keyboard.dismiss();\n\n      if (ANDROID) {\n        var _yield$DatePickerAndr = yield DatePickerAndroid.open({\n          date: date,\n          minDate: minimumDate,\n          maxDate: maximumDate,\n          mode: 'calendar'\n        }),\n            action = _yield$DatePickerAndr.action,\n            year = _yield$DatePickerAndr.year,\n            month = _yield$DatePickerAndr.month,\n            day = _yield$DatePickerAndr.day;\n\n        if (action === DatePickerAndroid.dismissedAction) {\n          return;\n        }\n\n        month = ('0' + (month + 1)).slice(-2);\n        day = ('0' + day).slice(-2);\n        var selected = new Date(year + \"-\" + month + \"-\" + day);\n        onDateChange(selected);\n        return;\n      }\n\n      setVisible(true);\n    });\n\n    return function open() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var close = function close() {\n    setVisible(false);\n  };\n\n  var onDateChange = function onDateChange(date) {\n    var formattedDate = dayjs(date).format(dateFormat);\n    setDate(date);\n    setValue(formattedDate);\n\n    if (!handleChange) {\n      return;\n    }\n\n    handleChange(formattedDate);\n  };\n\n  if (onRef) {\n    onRef({\n      focus: open\n    });\n  }\n\n  var renderInput = function renderInput() {\n    return _jsx(TouchableOpacity, {\n      onPress: open,\n      activeOpacity: 1,\n      children: _jsx(TextInput, _objectSpread(_objectSpread({}, inputProps), {}, {\n        value: value,\n        editable: false,\n        pointerEvents: 'none'\n      }))\n    });\n  };\n\n  var renderDatePicker = function renderDatePicker() {\n    if (ANDROID) {\n      return;\n    }\n\n    var scheme = useColorScheme();\n    var styles = StyleSheet.create({\n      modal: {\n        padding: 0,\n        margin: 0\n      },\n      background: _objectSpread({}, StyleSheet.absoluteFill),\n      datePicker: _objectSpread(_objectSpread({\n        backgroundColor: scheme === 'dark' ? 'black' : 'white'\n      }, StyleSheet.absoluteFill), {}, {\n        top: 'auto',\n        paddingBottom: getBottomSpace()\n      }),\n      bar: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        backgroundColor: scheme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.03)',\n        height: 44\n      },\n      done: {\n        paddingHorizontal: 17.5,\n        fontFamily: 'System',\n        fontSize: 15,\n        color: scheme === 'dark' ? 'white' : '#147efb',\n        fontWeight: '700',\n        lineHeight: 44\n      }\n    });\n    return _jsxs(Modal, {\n      style: styles.modal,\n      visible: visible,\n      transparent: true,\n      animationType: 'slide',\n      onRequestClose: close,\n      children: [_jsx(TouchableOpacity, {\n        style: styles.background,\n        onPress: close,\n        children: _jsx(_Fragment, {})\n      }), _jsxs(View, {\n        style: styles.datePicker,\n        children: [_jsx(View, {\n          style: styles.bar,\n          children: _jsx(TouchableOpacity, {\n            onPress: close,\n            activeOpacity: 0.8,\n            children: _jsx(Text, {\n              style: styles.done,\n              children: \"Done\"\n            })\n          })\n        }), _jsx(DatePickerIOS, {\n          initialDate: defaultDate,\n          date: date,\n          minimumDate: minimumDate,\n          maximumDate: maximumDate,\n          mode: 'date',\n          onDateChange: onDateChange\n        })]\n      })]\n    });\n  };\n\n  return _jsxs(AppearanceProvider, {\n    children: [renderInput(), renderDatePicker()]\n  });\n});","map":{"version":3,"names":["React","DatePickerAndroid","DatePickerIOS","AppearanceProvider","useColorScheme","getBottomSpace","dayjs","inputProps","dateFormat","defaultValue","defaultDate","Date","minimumDate","maximumDate","handleChange","onRef","useState","date","setDate","value","setValue","visible","setVisible","ANDROID","Platform","OS","useEffect","open","Keyboard","dismiss","minDate","maxDate","mode","action","year","month","day","dismissedAction","slice","selected","onDateChange","close","formattedDate","format","focus","renderInput","renderDatePicker","scheme","styles","StyleSheet","create","modal","padding","margin","background","absoluteFill","datePicker","backgroundColor","top","paddingBottom","bar","flexDirection","justifyContent","height","done","paddingHorizontal","fontFamily","fontSize","color","fontWeight","lineHeight"],"sources":["C:/Users/aline/OneDrive/Área de Trabalho/TurisInfo_TCC/client/node_modules/react-native-date-input/DateInput.js"],"sourcesContent":["import React from 'react';\n\nimport {\n  DatePickerAndroid,\n  DatePickerIOS,\n  Keyboard,\n  Modal,\n  Platform,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport dayjs from 'dayjs';\n\nexport default ({\n  inputProps = {},\n  dateFormat = 'YYYY-MM-DD',\n  defaultValue = '',\n  defaultDate = new Date(),\n  minimumDate = null,\n  maximumDate = null,\n  handleChange,\n  onRef,\n}) => {\n  const [date, setDate] = React.useState(defaultDate);\n  const [value, setValue] = React.useState(defaultValue);\n  const [visible, setVisible] = React.useState(false);\n  const ANDROID = Platform.OS === 'android';\n\n  React.useEffect(() => {\n    setValue(defaultValue);\n  }, [defaultValue]);\n\n  const open = async () => {\n    Keyboard.dismiss();\n\n    if (ANDROID) {\n      let { action, year, month, day } = await DatePickerAndroid.open({\n        date,\n        minDate: minimumDate,\n        maxDate: maximumDate,\n        mode: 'calendar',\n      });\n\n      if (action === DatePickerAndroid.dismissedAction) {\n        return;\n      }\n\n      month = ('0' + (month + 1)).slice(-2);\n      day = ('0' + day).slice(-2);\n\n      const selected = new Date(`${year}-${month}-${day}`);\n      onDateChange(selected);\n\n      return;\n    }\n\n    setVisible(true);\n  };\n\n  const close = () => {\n    setVisible(false);\n  };\n\n  const onDateChange = (date) => {\n    const formattedDate = dayjs(date).format(dateFormat);\n\n    setDate(date);\n    setValue(formattedDate);\n\n    if (!handleChange) {\n      return;\n    }\n\n    handleChange(formattedDate);\n  };\n\n  if (onRef) {\n    onRef({ focus: open });\n  }\n\n  const renderInput = () => {\n    return (\n      <TouchableOpacity onPress={open} activeOpacity={1}>\n        <TextInput\n          {...inputProps}\n          value={value}\n          editable={false}\n          pointerEvents={'none'}\n        />\n      </TouchableOpacity>\n    );\n  };\n\n  const renderDatePicker = () => {\n    if (ANDROID) {\n      return;\n    }\n\n    const scheme = useColorScheme();\n\n    const styles = StyleSheet.create({\n      modal: {\n        padding: 0,\n        margin: 0,\n      },\n      background: {\n        ...StyleSheet.absoluteFill,\n      },\n      datePicker: {\n        backgroundColor: scheme === 'dark' ? 'black' : 'white',\n        ...StyleSheet.absoluteFill,\n        top: 'auto',\n        paddingBottom: getBottomSpace(),\n      },\n      bar: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        backgroundColor:\n          scheme === 'dark'\n            ? 'rgba(255, 255, 255, 0.1)'\n            : 'rgba(0, 0, 0, 0.03)',\n        height: 44,\n      },\n      done: {\n        paddingHorizontal: 17.5,\n        fontFamily: 'System',\n        fontSize: 15,\n        color: scheme === 'dark' ? 'white' : '#147efb',\n        fontWeight: '700',\n        lineHeight: 44,\n      },\n    });\n\n    return (\n      <Modal\n        style={styles.modal}\n        visible={visible}\n        transparent\n        animationType={'slide'}\n        onRequestClose={close}\n      >\n        <TouchableOpacity style={styles.background} onPress={close}>\n          <></>\n        </TouchableOpacity>\n\n        <View style={styles.datePicker}>\n          <View style={styles.bar}>\n            <TouchableOpacity onPress={close} activeOpacity={0.8}>\n              <Text style={styles.done}>Done</Text>\n            </TouchableOpacity>\n          </View>\n\n          <DatePickerIOS\n            initialDate={defaultDate}\n            date={date}\n            minimumDate={minimumDate}\n            maximumDate={maximumDate}\n            mode={'date'}\n            onDateChange={onDateChange}\n          />\n        </View>\n      </Modal>\n    );\n  };\n\n  return (\n    <AppearanceProvider>\n      {renderInput()}\n      {renderDatePicker()}\n    </AppearanceProvider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}