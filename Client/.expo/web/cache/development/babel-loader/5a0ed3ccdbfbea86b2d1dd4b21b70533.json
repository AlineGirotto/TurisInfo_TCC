{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"mask\", \"type\", \"options\", \"textBold\", \"textItalic\", \"textDecoration\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { mask } from \"../utils/mask\";\nexport function MaskedText(_ref) {\n  var text = _ref.children,\n      _ref$mask = _ref.mask,\n      pattern = _ref$mask === void 0 ? '' : _ref$mask,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'custom' : _ref$type,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      textBold = _ref.textBold,\n      textItalic = _ref.textItalic,\n      textDecoration = _ref.textDecoration,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var styleSheet = _objectSpread(_objectSpread({}, typeof style === 'object' ? style : {}), {}, {\n    fontWeight: textBold ? 'bold' : 'normal',\n    fontStyle: textItalic ? 'italic' : 'normal',\n    textDecorationLine: textDecoration ? textDecoration : 'none'\n  });\n\n  return React.createElement(Text, _extends({}, rest, {\n    style: _objectSpread({}, styleSheet)\n  }), mask(text, pattern, type, options));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,IAAT;AAaA,OAAO,SAASC,UAAT,CAAmBC,IAAnB,EAUsC;EAAA,IATjCC,IASiC,GAAfD,IAAe,CAT3CE,QAS2C;EAAA,gBAAfF,IAAe,CAR3CF,IAQ2C;EAAA,IARrCK,OAQqC,0BAR3B,EAQ2B;EAAA,gBAAfH,IAAe,CAP3CI,IAO2C;EAAA,IAP3CA,IAO2C,0BAPpC,QAOoC;EAAA,mBAAfJ,IAAe,CAN3CK,OAM2C;EAAA,IAN3CA,OAM2C,6BANjC,EAMiC;EAAA,IAL3CC,QAK2C,GAAfN,IAAe,CAL3CM,QAK2C;EAAA,IAJ3CC,UAI2C,GAAfP,IAAe,CAJ3CO,UAI2C;EAAA,IAH3CC,cAG2C,GAAfR,IAAe,CAH3CQ,cAG2C;EAAA,IAF3CC,KAE2C,GAAfT,IAAe,CAF3CS,KAE2C;EAAA,IADxCC,IACwC,4BAAfV,IAAe;;EAC3C,IAAMW,UAAU,mCACV,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoC,EAD1B;IAEdG,UAAU,EAACN,QAAQ,GAAG,MAAH,GAAY,QAFjB;IAGdO,SAAS,EAAEN,UAAU,GAAG,QAAH,GAAc,QAHrB;IAIdO,kBAAkB,EAAEN,cAAc,GAAGA,cAAH,GAAoB;EAJxC,EAAhB;;EAMA,OAAOX,oBAACkB,IAAD,EAAKC,aAAKN,IAAL,EAAS;IAAED,KAAK,oBAAME,UAAN;EAAP,CAAT,CAAL,EAAqDb,IAAI,CAACG,IAAD,EAAOE,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,CAAzD,CAAP;AACF","names":["React","mask","MaskedText","_ref","text","children","pattern","type","options","textBold","textItalic","textDecoration","style","rest","styleSheet","fontWeight","fontStyle","textDecorationLine","Text","_extends"],"sources":["MaskedText.tsx"],"sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions, StyleObj, TextDecorationOptions } from 'src/@types'\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  textBold?: boolean\n  textItalic?:boolean\n  textDecoration?:TextDecorationOptions\n  style?:StyleObj\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  textBold,\n  textItalic,\n  textDecoration,\n  style,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  const styleSheet = {\n    ...(typeof style === 'object' ? style : {}),\n    fontWeight:textBold ? 'bold' : 'normal',\n    fontStyle: textItalic ? 'italic' : 'normal',\n    textDecorationLine: textDecoration ? textDecoration : 'none'\n  }\n  return <Text {...rest} style={{...styleSheet} as StyleObj}>{mask(text, pattern, type, options)}</Text>;\n}\n"]},"metadata":{},"sourceType":"module"}